actor summing {
	state sum: Int;

	initialiser {
		let self: Pid[Int] = summing;
		send(self, 10000);
		return 0;
	}

	update (num: Int) {
		if (num <= 0) {
			intrinsic(print_int, sum);
			return sum;
		};
		let minused = num - 1;

		# Describing the next planned input for itself
		send(summing, minused);

		# Computing its state (referenced by the variable `sum`) that will be used in the next scheduling cycle along
		# with the next message that it just sent 
		return num + sum;
	}
}
