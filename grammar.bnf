prog ::= <declarations>
declarations ::= <list(<actor>)>
actor ::= "actor" <symbol> { <state> <initialiser> <message-handler> }
expr ::= <expr-head> <expr-tail>
expr-head ::= <number> | <string> | <symbol> | <bool> | ( <expr> )
expr-tail ::= <infix> <expr> | ε
string ::= '"' [^"]* '"''
number ::= [-]?[0-9]*[.]?[0-9]*
infix ::= '+' | '*' | '-' | '/' | '^' | "==" | "<=" | ">=" | '<' | '>' | "&&" | "||"
bool ::= "true" | "false" | "not(" <expr> ')'
symbol ::= [a-zA-Z]^[{}"(),;]*
state ::= "state" <symbol> ':' <type-expr> ';'
initialiser ::= "initialiser" '{' <list(<statement>)> '}'
arg-list = <symbol> ':' <type-expr> <arg-tail>
arg-tail ::= ',' <arg-list> | ')'
statement ::= <statement-body> ';' 
statement-body ::= <assignment> | <return> | <actor> | <send> | <if-statement>
message-handler ::= "update" '(' <symbol> ':' <type-expr> ')' '{' <list(<statement>)> '}'
assignment ::= <symbol> ':' <type-expr> '=' <expr>
return ::= "return" <expr>
send ::= "send(" <expr> ',' <expr> ")"
if-statement ::= "if" <expr> '{' <list(<statement>)> '}' <if-tail>
if-tail ::= "else" '{' <list(<statement>)> '}' | ε
type-expr ::= <type-expr-head> <type-expr-tail>
type-expr-head ::= <typename> | <forall> | <typevar> 	
# The pid rule is later "parsed" in something more like a filter pass than actual parsing. it is initially parsed as a type-expr(type-expr-head(typename)) type-expr-tail(arg))
type-expr-tail ::= '[' <list(<type-expr> ',')> ']' <type-expr-tail> | ε
typename ::= [A-Z][a-zA-Z]+
forall ::= "for" '[' <list(<typevar> ',')> ']' '.' <type-expr>
typevar ::= '\'' [a-z]+
